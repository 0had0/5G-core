name: 5G Core CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [amf, smf, upf, pcf, udm, ausf, nrf, nssf]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build binary
        run: go build -o bin/${{ matrix.component }} cmd/${{ matrix.component }}/main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-binary
          path: bin/${{ matrix.component }}

  docker:
    name: Docker Build and Push
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        component: [amf, smf, upf, pcf, udm, ausf, nrf, nssf]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.component }}-binary
          path: bin/

      - name: Make binary executable
        run: chmod +x bin/${{ matrix.component }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: build/${{ matrix.component }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/5g-core-${{ matrix.component }}:${{ steps.extract_branch.outputs.branch }}
            ghcr.io/${{ github.repository_owner }}/5g-core-${{ matrix.component }}:latest

  deploy-dev:
    name: Deploy to Development
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k deployments/overlays/dev

  deploy-prod:
    name: Deploy to Production
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PROD_KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k deployments/overlays/prod